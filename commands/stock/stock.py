import asyncio
from telegram import Update
from telegram.ext import ContextTypes
from datetime import datetime
from utils.formatters import format_vnd
from utils.stock_info import get_full_stock_info
from utils.loading import (
    show_animated_loading, 
    update_loading_with_stock_animation, 
    update_loading_with_money_animation,
    finish_loading, 
    finish_loading_with_error
)

# Import database models
try:
    from entities.coin_price.entity import StockPrice
    from entities.index import SessionLocal
except ImportError:
    # Fallback n·∫øu kh√¥ng c√≥ database
    StockPrice = None
    SessionLocal = None

async def stock(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("Vui l√≤ng nh·∫≠p l·ªánh ƒë√∫ng: /stock <symbol> ho·∫∑c /stock info <symbol>")
        return
    
    if context.args[0].lower() == "info" and len(context.args) > 1:
        symbol = context.args[1].upper()
        
        # Hi·ªÉn th·ªã loading ƒë·ªông
        loading_msg = await show_animated_loading(update, context, f"ƒêang t√¨m th√¥ng tin chi ti·∫øt cho {symbol}...")
        
        try:
            info = await get_full_stock_info(symbol, debug_raw=True, update=update)
            if info:
                await finish_loading(loading_msg, info)
            else:
                await finish_loading_with_error(loading_msg, "Kh√¥ng t√¨m th·∫•y th√¥ng tin c√¥ng ty cho m√£ n√†y.")
        except Exception as e:
            await finish_loading_with_error(loading_msg, f"C√≥ l·ªói x·∫£y ra: {e}")
        return
    
    symbol = context.args[0].upper()
    
    # Hi·ªÉn th·ªã loading ƒë·ªông
    loading_msg = await show_animated_loading(update, context, f"ƒêang t√¨m gi√° c·ªï phi·∫øu {symbol}...")
    
    try:
        from vnstock import Trading
        
        # C·∫≠p nh·∫≠t loading v·ªõi animation c·ªï phi·∫øu
        await update_loading_with_stock_animation(loading_msg, f"ƒêang l·∫•y d·ªØ li·ªáu t·ª´ s√†n giao d·ªãch...", 1)
        
        prices = Trading(source='VCI').price_board([symbol])
        if prices.empty:
            await finish_loading_with_error(loading_msg, f"Kh√¥ng t√¨m th·∫•y m√£ ch·ª©ng kho√°n {symbol}")
            return
        
        # C·∫≠p nh·∫≠t loading v·ªõi animation ti·ªÅn t·ªá
        await update_loading_with_money_animation(loading_msg, f"ƒêang l∆∞u d·ªØ li·ªáu...", 2)
        
        price = float(prices.iloc[0][('match', 'match_price')])
        formatted_price = format_vnd(price)
        reply = f"üíπ Gi√° hi·ªán t·∫°i c·ªßa <b>{symbol}</b>: <b>{formatted_price}‚Ç´</b> üáªüá≥"
        
        # L∆∞u v√†o database n·∫øu c√≥
        if StockPrice and SessionLocal:
            session = SessionLocal()
            try:
                stock_price = StockPrice(symbol=symbol, price=price, timestamp=datetime.utcnow())
                session.add(stock_price)
                session.commit()
            except Exception as e:
                print(f"Database error: {e}")
            finally:
                session.close()
        
        await finish_loading(loading_msg, reply)
        
    except Exception as e:
        await finish_loading_with_error(loading_msg, f"C√≥ l·ªói x·∫£y ra: {e}")

