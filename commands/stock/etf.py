from telegram import Update
from telegram.ext import ContextTypes
from utils.formatters import format_vnd
from utils.stock_info import get_full_stock_info
from utils.common import get_development_message

async def get_etf_data_from_vnstock(symbol):
    """L·∫•y d·ªØ li·ªáu ETF th·ª±c t·ª´ vnstock"""
    try:
        from vnstock import Trading, Company, Listing
        import pandas as pd
        
        # L·∫•y d·ªØ li·ªáu gi√°
        trading = Trading(source='TCBS')
        price_data = trading.price_board([symbol])
        
        if price_data.empty:
            return None
        
        price_info = price_data.iloc[0]
        
        # T·∫°o d·ªØ li·ªáu ETF t·ª´ vnstock
        etf_data = {
            'symbol': symbol,
            'price': float(price_info['Gi√°']) if price_info['Gi√°'] is not None else 0,
            'price_change_1d': price_info.get('% thay ƒë·ªïi gi√° 3D', 0),
            'price_change_1m': price_info.get('% thay ƒë·ªïi gi√° 1M', 0),
            'price_change_3m': price_info.get('% thay ƒë·ªïi gi√° 3M', 0),
            'price_change_1y': price_info.get('% thay ƒë·ªïi gi√° 1Y', 0),
            'volume': price_info.get('KLGD r√≤ng(CM)', 0),
            'high_1y': price_info.get('ƒê·ªânh 1Y', 0) if price_info.get('ƒê·ªânh 1Y') is not None else 0,
            'low_1y': price_info.get('ƒê√°y 1Y', 0) if price_info.get('ƒê√°y 1Y') is not None else 0
        }
        
        # X√°c ƒë·ªãnh lo·∫°i ETF d·ª±a tr√™n symbol v√† d·ªØ li·ªáu
        etf_data['etf_type'] = 'Unknown'
        etf_data['issuer'] = 'Unknown'
        etf_data['index'] = 'Unknown'
        
        # Ph√¢n lo·∫°i ETF d·ª±a tr√™n symbol pattern
        if symbol.startswith('FUEV'):
            if 'VND' in symbol:
                etf_data['etf_type'] = 'Fubon FTSE Vietnam ETF'
                etf_data['issuer'] = 'Fubon'
                etf_data['index'] = 'FTSE Vietnam'
            elif 'SVFL' in symbol:
                etf_data['etf_type'] = 'Fubon FTSE Vietnam 30 ETF'
                etf_data['issuer'] = 'Fubon'
                etf_data['index'] = 'FTSE Vietnam 30'
            elif 'SV50' in symbol:
                etf_data['etf_type'] = 'Fubon FTSE Vietnam 50 ETF'
                etf_data['issuer'] = 'Fubon'
                etf_data['index'] = 'FTSE Vietnam 50'
            elif 'VNV30' in symbol:
                etf_data['etf_type'] = 'Fubon FTSE Vietnam 30 ETF'
                etf_data['issuer'] = 'Fubon'
                etf_data['index'] = 'VN30'
            elif 'VFMID' in symbol:
                etf_data['etf_type'] = 'Fubon FTSE Vietnam Mid Cap ETF'
                etf_data['issuer'] = 'Fubon'
                etf_data['index'] = 'FTSE Vietnam Mid Cap'
            elif 'VN100' in symbol:
                etf_data['etf_type'] = 'VinaCapital VN100 ETF'
                etf_data['issuer'] = 'VinaCapital'
                etf_data['index'] = 'VN100'
            elif 'SVND' in symbol:
                etf_data['etf_type'] = 'Fubon FTSE Vietnam ETF'
                etf_data['issuer'] = 'Fubon'
                etf_data['index'] = 'FTSE Vietnam'
            else:
                # ETF Fubon kh√°c
                etf_data['etf_type'] = 'Fubon ETF'
                etf_data['issuer'] = 'Fubon'
                etf_data['index'] = 'Unknown'
        elif symbol.startswith('VN'):
            if symbol == 'VNM':
                etf_data['etf_type'] = 'VanEck Vectors Vietnam ETF'
                etf_data['issuer'] = 'VanEck'
                etf_data['index'] = 'Vietnam Market'
            elif '30' in symbol:
                etf_data['etf_type'] = 'VN30 ETF'
                etf_data['issuer'] = 'SSI'
                etf_data['index'] = 'VN30'
            elif 'MID' in symbol:
                etf_data['etf_type'] = 'VN Mid Cap ETF'
                etf_data['issuer'] = 'SSI'
                etf_data['index'] = 'VN Mid Cap'
            elif 'SML' in symbol:
                etf_data['etf_type'] = 'VN Small Cap ETF'
                etf_data['issuer'] = 'SSI'
                etf_data['index'] = 'VN Small Cap'
            elif 'DIAMOND' in symbol:
                etf_data['etf_type'] = 'VNDiamond ETF'
                etf_data['issuer'] = 'SSI'
                etf_data['index'] = 'VNDiamond'
            else:
                # ETF theo ng√†nh
                sector_map = {
                    'FIN': 'T√†i ch√≠nh', 'REAL': 'B·∫•t ƒë·ªông s·∫£n', 'MATERIAL': 'V·∫≠t li·ªáu',
                    'ENERGY': 'NƒÉng l∆∞·ª£ng', 'HEALTH': 'Y t·∫ø', 'TECH': 'C√¥ng ngh·ªá',
                    'COMM': 'Ti√™u d√πng', 'INDUSTRIAL': 'C√¥ng nghi·ªáp', 'UTILITY': 'Ti·ªán √≠ch', 'TELECOM': 'Vi·ªÖn th√¥ng'
                }
                for sector, name in sector_map.items():
                    if sector in symbol:
                        etf_data['etf_type'] = f'VN {name} ETF'
                        etf_data['issuer'] = 'SSI'
                        etf_data['index'] = f'VN {name}'
                        break
        else:
            # ETF kh√°c kh√¥ng theo pattern
            etf_data['etf_type'] = 'ETF'
            etf_data['issuer'] = 'Unknown'
            etf_data['index'] = 'Unknown'
        
        return etf_data
        
    except Exception as e:
        print(f"Error getting ETF data from vnstock: {e}")
        return None

async def etf(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """ETF command handler"""
    if not context.args:
        # T√≠nh nƒÉng ƒëang ph√°t tri·ªÉn
        reply = get_development_message("/etf", "hi·ªÉn th·ªã danh s√°ch ETF")
        
        await update.message.reply_text(reply, parse_mode='HTML')
        
        # # Hi·ªÉn th·ªã danh s√°ch ETF - CODE C≈® (ƒê√É COMMENT)
        # try:
        #     # Danh s√°ch ETF ph·ªï bi·∫øn ƒë·ªÉ ki·ªÉm tra
        #     etf_symbols = ['FUEVFVND', 'FUESSVFL', 'FUEVNV30', 'FUESSVND', 'FUEVFMID', 'FUEVN100', 'FUESSV50', 'VNM', 'VNM30', 'VNMID', 'VNSML', 'VNDIAMOND']
        #     
        #     reply = "üìà <b>Danh s√°ch ETF c√≥ s·∫µn tr√™n vnstock:</b>\n\n"
        #     available_etfs = []
        #     
        #     for symbol in etf_symbols:
        #         try:
        #             etf_data = await get_etf_data_from_vnstock(symbol)
        #             if etf_data and etf_data.get('price'):
        #                 available_etfs.append({
        #                     'symbol': symbol,
        #                     'type': etf_data.get('etf_type', 'ETF'),
        #                     'issuer': etf_data.get('issuer', 'Unknown'),
        #                     'index': etf_data.get('index', 'Unknown'),
        #                     'price': etf_data.get('price', 0)
        #                 })
        #         except Exception as e:
        #             continue
        #     
        #     if available_etfs:
        #         for etf in available_etfs:
        #             reply += f"üîπ <b>{etf['symbol']}</b> - {etf['type']}\n"
        #             reply += f"   üè¢ {etf['issuer']} | üìà {etf['index']}\n"
        #             reply += f"   üí∞ Gi√°: {etf['price']:,.0f}‚Ç´\n\n"
        #         else:
        #             reply += "‚ùå Kh√¥ng th·ªÉ l·∫•y danh s√°ch ETF t·ª± ƒë·ªông t·ª´ d·ªØ li·ªáu hi·ªán t·∫°i.\n"
        #             reply += "Vui l√≤ng d√πng /etf <symbol> ho·∫∑c /etf info <symbol> ƒë·ªÉ tra c·ª©u."
        #         
        #         await update.message.reply_text(reply, parse_mode='HTML')
        # except Exception as e:
        #     await update.message.reply_text(f"‚ùå C√≥ l·ªói x·∫£y ra: {str(e)}")
        return

    symbol = context.args[0].upper()
     
    if len(context.args) > 1 and context.args[1].lower() == 'info':
        # T√≠nh nƒÉng ƒëang ph√°t tri·ªÉn
        reply = get_development_message(f"/etf info {symbol}", "th√¥ng tin chi ti·∫øt ETF")
         
        await update.message.reply_text(reply, parse_mode='HTML')
        
        # # Hi·ªÉn th·ªã th√¥ng tin chi ti·∫øt ETF - CODE C≈® (ƒê√É COMMENT)
        # try:
        #     await show_animated_loading(update, context, f"üîç ƒêang l·∫•y th√¥ng tin ETF {symbol}...")
        #     
        #     etf_data = await get_etf_data_from_vnstock(symbol)
        #     
        #     if not etf_data:
        #         await finish_loading(loading_msg, f"‚ùå Kh√¥ng t√¨m th·∫•y th√¥ng tin ETF {symbol}")
        #         return
        #     
        #     reply = f"üìä <b>Th√¥ng tin ETF: {symbol}</b>\n\n"
        #     
        #     # Th√¥ng tin c∆° b·∫£n
        #     reply += f"üíπ <b>Gi√° hi·ªán t·∫°i:</b> {etf_data.get('price', 0):,.0f}‚Ç´\n"
        #     reply += f"üìù <b>T√™n:</b> {etf_data.get('etf_type', 'Unknown')}\n"
        #     reply += f"üè¢ <b>ƒê∆°n v·ªã qu·∫£n l√Ω:</b> {etf_data.get('issuer', 'Unknown')}\n"
        #     reply += f"üìà <b>Ch·ªâ s·ªë tham chi·∫øu:</b> {etf_data.get('index', 'Unknown')}\n\n"
        #     
        #     # Thay ƒë·ªïi gi√°
        #     price_change = etf_data.get('price_change', {})
        #     if price_change:
        #         reply += "üìà <b>Thay ƒë·ªïi gi√°:</b>\n"
        #         for period, change in price_change.items():
        #             if change is not None:
        #         reply += f"   ‚Ä¢ {period}: {change:+.1f}%\n"
        #         reply += "\n"
        #     
        #     # Th√¥ng tin giao d·ªãch
        #     reply += "üìä <b>Th√¥ng tin giao d·ªãch:</b>\n"
        #     reply += f"   ‚Ä¢ Kh·ªëi l∆∞·ª£ng: {etf_data.get('volume', 0):,.0f} c·ªï phi·∫øu\n"
        #     reply += f"   ‚Ä¢ ƒê·ªânh 1Y: {etf_data.get('high_1y', 0):,.0f}‚Ç´\n"
        #     reply += f"   ‚Ä¢ ƒê√°y 1Y: {etf_data.get('low_1y', 0):,.0f}‚Ç´\n\n"
        #     
        #     reply += "üí° <b>Ngu·ªìn d·ªØ li·ªáu:</b> vnstock API (TCBS source)"
        #     
        #     await finish_loading(loading_msg, reply)
        # except Exception as e:
        #     await finish_loading(loading_msg, f"‚ùå C√≥ l·ªói x·∫£y ra: {str(e)}")
        return
    
    # Ki·ªÉm tra gi√° ETF - ch·ªâ ch·ª©c nƒÉng n√†y ho·∫°t ƒë·ªông
    try:
        from vnstock import Trading
        prices = Trading(source='TCBS').price_board([symbol])
        if prices.empty:
            await update.message.reply_text(f"‚ùå Kh√¥ng t√¨m th·∫•y m√£ ETF {symbol}")
            return
        
        # S·ª≠ d·ª•ng c·ªôt 'Gi√°' thay v√¨ tuple key
        price_value = prices.iloc[0]['Gi√°']
        if price_value is None:
            await update.message.reply_text(f"‚ùå Kh√¥ng c√≥ d·ªØ li·ªáu gi√° cho m√£ ETF {symbol}")
            return
        
        price = float(price_value)
        formatted_price = format_vnd(price)
        reply = f"üíπ <b>Gi√° hi·ªán t·∫°i c·ªßa {symbol}:</b> <b>{formatted_price}‚Ç´</b> üáªüá≥"
        
        await update.message.reply_text(reply, parse_mode='HTML')
    except Exception as e:
        await update.message.reply_text(f"‚ùå C√≥ l·ªói x·∫£y ra: {str(e)}")
    return

