from telegram import Update
from telegram.ext import ContextTypes
import matplotlib.pyplot as plt
import os
from utils.formatters import format_vnd

async def funds(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Danh s√°ch qu·ªπ ƒë·∫ßu t∆∞ (ETF & Qu·ªπ m·ªü)"""
    try:
        from vnstock import Listing
        listing = Listing()
        
        reply = "üí∞ <b>QU·ª∏ ƒê·∫¶U T∆Ø VI·ªÜT NAM:</b>\n\n"
        
        # L·∫•y danh s√°ch ETF
        try:
            etf_list = listing.etf()
            if not etf_list.empty:
                reply += "üìä <b>ETF (Qu·ªπ ho√°n ƒë·ªïi danh m·ª•c):</b>\n"
                for i, (_, row) in enumerate(etf_list.head(10).iterrows(), 1):
                    symbol = row.get('symbol', 'N/A')
                    name = row.get('organ_name', 'N/A')
                    reply += f"{i}. <b>{symbol}</b> - {name}\n"
                
                if len(etf_list) > 10:
                    reply += f"... v√† {len(etf_list) - 10} ETF kh√°c\n"
                reply += "\n"
        except:
            reply += "üìä Kh√¥ng c√≥ d·ªØ li·ªáu ETF\n\n"
        
        # Th√™m th√¥ng tin v·ªÅ c√°c lo·∫°i qu·ªπ
        reply += "üè¶ <b>Ph√¢n lo·∫°i qu·ªπ ƒë·∫ßu t∆∞:</b>\n"
        reply += "‚Ä¢ <b>ETF:</b> Qu·ªπ ho√°n ƒë·ªïi danh m·ª•c - giao d·ªãch nh∆∞ c·ªï phi·∫øu\n"
        reply += "‚Ä¢ <b>Qu·ªπ m·ªü:</b> Qu·ªπ ƒë·∫ßu t∆∞ ch·ª©ng kho√°n - mua/b√°n theo NAV\n"
        reply += "‚Ä¢ <b>Qu·ªπ ƒë√≥ng:</b> Qu·ªπ ƒë·∫ßu t∆∞ ƒë√≥ng - kh√¥ng mua/b√°n th∆∞·ªùng xuy√™n\n\n"
        
        reply += "üí° <b>ETF ph·ªï bi·∫øn:</b>\n"
        reply += "‚Ä¢ FUEVFVND - ETF VNM\n"
        reply += "‚Ä¢ E1VFVN30 - ETF VN30\n"
        reply += "‚Ä¢ FUESSVFL - ETF SSI\n"
        reply += "‚Ä¢ VFMVN30 - ETF VNM VN30\n"
        reply += "‚Ä¢ VFMVFS - ETF VNM VNFinSelect\n\n"
        
        reply += "üìà <b>L∆∞u √Ω ƒë·∫ßu t∆∞:</b>\n"
        reply += "‚Ä¢ ETF c√≥ t√≠nh thanh kho·∫£n cao h∆°n qu·ªπ m·ªü\n"
        reply += "‚Ä¢ Qu·ªπ m·ªü c√≥ NAV c·∫≠p nh·∫≠t h√†ng ng√†y\n"
        reply += "‚Ä¢ N√™n xem x√©t ph√≠ qu·∫£n l√Ω v√† hi·ªáu su·∫•t l·ªãch s·ª≠\n"
        
        await update.message.reply_text(reply, parse_mode='HTML')
    except Exception as e:
        await update.message.reply_text(f"C√≥ l·ªói x·∫£y ra: {e}")

async def fund_detail(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Chi ti·∫øt qu·ªπ ƒë·∫ßu t∆∞"""
    if not context.args:
        await update.message.reply_text("Vui l√≤ng nh·∫≠p: /fund_detail <m√£_qu·ªπ>")
        await update.message.reply_text("V√≠ d·ª•: /fund_detail FUEVFVND")
        await update.message.reply_text("V√≠ d·ª•: /fund_detail E1VFVN30")
        return
    
    try:
        fund_symbol = context.args[0].upper()
        from vnstock import Trading, Listing
        trading = Trading(source='VCI')
        listing = Listing()
        
        # L·∫•y th√¥ng tin gi√° qu·ªπ
        fund_price = trading.price_board([fund_symbol])
        
        reply = f"üí∞ <b>CHI TI·∫æT QU·ª∏ {fund_symbol}:</b>\n\n"
        
        if not fund_price.empty:
            row = fund_price.iloc[0]
            current_price = row[('match', 'match_price')]
            ref_price = row[('listing', 'ref_price')]
            change = current_price - ref_price
            pct_change = (change / ref_price) * 100 if ref_price else 0
            volume = row[('match', 'match_vol')]
            high = row[('match', 'highest')]
            low = row[('match', 'lowest')]
            
            emoji = "üü¢" if change >= 0 else "üî¥"
            
            reply += f"{emoji} <b>Th√¥ng tin gi√°:</b>\n"
            reply += f"‚Ä¢ Gi√° hi·ªán t·∫°i: {format_vnd(current_price)}‚Ç´ ({pct_change:+.2f}%)\n"
            reply += f"‚Ä¢ Thay ƒë·ªïi: {format_vnd(change)}‚Ç´\n"
            reply += f"‚Ä¢ Kh·ªëi l∆∞·ª£ng: {format_vnd(volume)} ƒë∆°n v·ªã\n"
            reply += f"‚Ä¢ Cao nh·∫•t: {format_vnd(high)}‚Ç´\n"
            reply += f"‚Ä¢ Th·∫•p nh·∫•t: {format_vnd(low)}‚Ç´\n\n"
        
        # L·∫•y th√¥ng tin t·ª´ danh s√°ch ETF
        try:
            etf_list = listing.etf()
            fund_info = etf_list[etf_list['symbol'].str.upper() == fund_symbol]
            
            if not fund_info.empty:
                info = fund_info.iloc[0]
                reply += "üìã <b>Th√¥ng tin c∆° b·∫£n:</b>\n"
                reply += f"‚Ä¢ T√™n qu·ªπ: {info.get('organ_name', 'N/A')}\n"
                reply += f"‚Ä¢ M√£ qu·ªπ: {info.get('symbol', 'N/A')}\n"
                if 'exchange' in info:
                    reply += f"‚Ä¢ S√†n giao d·ªãch: {info.get('exchange', 'N/A')}\n"
                if 'type' in info:
                    reply += f"‚Ä¢ Lo·∫°i qu·ªπ: {info.get('type', 'N/A')}\n"
                reply += "\n"
        except:
            pass
        
        # Th√¥ng tin v·ªÅ c√°c qu·ªπ ph·ªï bi·∫øn
        fund_descriptions = {
            'FUEVFVND': {
                'name': 'ETF VNM',
                'description': 'Qu·ªπ ETF theo d√µi ch·ªâ s·ªë VN-Index',
                'strategy': 'ƒê·∫ßu t∆∞ v√†o c√°c c·ªï phi·∫øu trong VN-Index',
                'risk': 'R·ªßi ro trung b√¨nh'
            },
            'E1VFVN30': {
                'name': 'ETF VN30',
                'description': 'Qu·ªπ ETF theo d√µi ch·ªâ s·ªë VN30',
                'strategy': 'ƒê·∫ßu t∆∞ v√†o 30 c·ªï phi·∫øu l·ªõn nh·∫•t HOSE',
                'risk': 'R·ªßi ro th·∫•p ƒë·∫øn trung b√¨nh'
            },
            'FUESSVFL': {
                'name': 'ETF SSI',
                'description': 'Qu·ªπ ETF c·ªßa SSI',
                'strategy': 'ƒê·∫ßu t∆∞ theo chi·∫øn l∆∞·ª£c c·ªßa SSI',
                'risk': 'R·ªßi ro trung b√¨nh'
            },
            'VFMVN30': {
                'name': 'ETF VNM VN30',
                'description': 'Qu·ªπ ETF VNM theo d√µi VN30',
                'strategy': 'ƒê·∫ßu t∆∞ v√†o 30 c·ªï phi·∫øu blue-chip',
                'risk': 'R·ªßi ro th·∫•p ƒë·∫øn trung b√¨nh'
            }
        }
        
        if fund_symbol in fund_descriptions:
            fund_info = fund_descriptions[fund_symbol]
            reply += "üìä <b>Th√¥ng tin chi ti·∫øt:</b>\n"
            reply += f"‚Ä¢ T√™n: {fund_info['name']}\n"
            reply += f"‚Ä¢ M√¥ t·∫£: {fund_info['description']}\n"
            reply += f"‚Ä¢ Chi·∫øn l∆∞·ª£c: {fund_info['strategy']}\n"
            reply += f"‚Ä¢ M·ª©c ƒë·ªô r·ªßi ro: {fund_info['risk']}\n\n"
        
        reply += "üí° <b>L∆∞u √Ω:</b>\n"
        reply += "‚Ä¢ ETF giao d·ªãch nh∆∞ c·ªï phi·∫øu tr√™n s√†n\n"
        reply += "‚Ä¢ Gi√° ETF c√≥ th·ªÉ kh√°c bi·ªát v·ªõi NAV\n"
        reply += "‚Ä¢ N√™n xem x√©t spread v√† kh·ªëi l∆∞·ª£ng giao d·ªãch\n"
        reply += "‚Ä¢ Theo d√µi tracking error so v·ªõi benchmark\n"
        
        await update.message.reply_text(reply, parse_mode='HTML')
    except Exception as e:
        await update.message.reply_text(f"C√≥ l·ªói x·∫£y ra: {e}")

async def fund_performance(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Hi·ªáu su·∫•t qu·ªπ ƒë·∫ßu t∆∞"""
    if not context.args:
        await update.message.reply_text("Vui l√≤ng nh·∫≠p: /fund_performance <m√£_qu·ªπ> [s·ªë_ng√†y]")
        await update.message.reply_text("V√≠ d·ª•: /fund_performance FUEVFVND")
        await update.message.reply_text("V√≠ d·ª•: /fund_performance E1VFVN30 30")
        return
    
    try:
        fund_symbol = context.args[0].upper()
        days = int(context.args[1]) if len(context.args) > 1 else 30
        
        from vnstock import Vnstock
        stock = Vnstock().stock(symbol=fund_symbol, source='VCI')
        
        # T√≠nh ng√†y b·∫Øt ƒë·∫ßu
        from datetime import datetime, timedelta
        end_date = datetime.now()
        start_date = end_date - timedelta(days=days)
        start_str = start_date.strftime('%Y-%m-%d')
        end_str = end_date.strftime('%Y-%m-%d')
        
        # L·∫•y l·ªãch s·ª≠
        df = stock.quote.history(start=start_str, end=end_str, interval='1D')
        
        if df.empty:
            await update.message.reply_text(f"Kh√¥ng c√≥ d·ªØ li·ªáu hi·ªáu su·∫•t cho qu·ªπ {fund_symbol}")
            return
        
        # T√≠nh to√°n hi·ªáu su·∫•t
        current_price = df['close'].iloc[-1]
        start_price = df['close'].iloc[0]
        total_return = ((current_price - start_price) / start_price) * 100
        max_price = df['close'].max()
        min_price = df['close'].min()
        volatility = df['close'].pct_change().std() * 100
        
        # T·∫°o bi·ªÉu ƒë·ªì
        plt.figure(figsize=(12, 6))
        plt.plot(df['time'], df['close'], label=f'Qu·ªπ {fund_symbol}', color='green', marker='o', markersize=3, linewidth=2)
        plt.title(f'Hi·ªáu su·∫•t qu·ªπ {fund_symbol} ({start_str} - {end_str})')
        plt.xlabel('Ng√†y')
        plt.ylabel('Gi√° qu·ªπ (VNƒê)')
        plt.xticks(rotation=45)
        plt.legend()
        plt.grid(True, linestyle='--', alpha=0.6)
        plt.tight_layout()
        
        chart_path = f'/tmp/{fund_symbol}_fund_chart.png'
        plt.savefig(chart_path)
        plt.close()
        
        # G·ª≠i bi·ªÉu ƒë·ªì
        await update.message.reply_photo(photo=open(chart_path, 'rb'))
        
        # G·ª≠i file CSV
        csv_path = f"/tmp/{fund_symbol}_fund_performance.csv"
        df.to_csv(csv_path)
        await update.message.reply_document(document=open(csv_path, 'rb'))
        
        # Th·ªëng k√™ hi·ªáu su·∫•t
        reply = f"üìä <b>HI·ªÜU SU·∫§T QU·ª∏ {fund_symbol} ({days} ng√†y):</b>\n\n"
        reply += f"üí∞ <b>Th·ªëng k√™ c∆° b·∫£n:</b>\n"
        reply += f"‚Ä¢ Gi√° hi·ªán t·∫°i: {format_vnd(current_price)}‚Ç´\n"
        reply += f"‚Ä¢ Gi√° ƒë·∫ßu k·ª≥: {format_vnd(start_price)}‚Ç´\n"
        reply += f"‚Ä¢ T·ªïng l·ª£i nhu·∫≠n: {total_return:+.2f}%\n"
        reply += f"‚Ä¢ Gi√° cao nh·∫•t: {format_vnd(max_price)}‚Ç´\n"
        reply += f"‚Ä¢ Gi√° th·∫•p nh·∫•t: {format_vnd(min_price)}‚Ç´\n"
        reply += f"‚Ä¢ ƒê·ªô bi·∫øn ƒë·ªông: {volatility:.2f}%\n\n"
        
        # ƒê√°nh gi√° hi·ªáu su·∫•t
        if total_return > 5:
            performance_rating = "üü¢ T·ªët"
        elif total_return > 0:
            performance_rating = "üü° Trung b√¨nh"
        else:
            performance_rating = "üî¥ K√©m"
        
        reply += f"üìà <b>ƒê√°nh gi√° hi·ªáu su·∫•t:</b>\n"
        reply += f"‚Ä¢ X·∫øp h·∫°ng: {performance_rating}\n"
        
        if volatility < 2:
            risk_level = "Th·∫•p"
        elif volatility < 5:
            risk_level = "Trung b√¨nh"
        else:
            risk_level = "Cao"
        
        reply += f"‚Ä¢ M·ª©c ƒë·ªô r·ªßi ro: {risk_level}\n"
        reply += f"‚Ä¢ ƒê·ªô bi·∫øn ƒë·ªông: {volatility:.2f}%\n\n"
        
        reply += "üí° <b>L∆∞u √Ω:</b>\n"
        reply += "‚Ä¢ Hi·ªáu su·∫•t qu√° kh·ª© kh√¥ng ƒë·∫£m b·∫£o t∆∞∆°ng lai\n"
        reply += "‚Ä¢ N√™n xem x√©t c√πng v·ªõi benchmark\n"
        reply += "‚Ä¢ Theo d√µi tracking error v√† ph√≠ qu·∫£n l√Ω\n"
        
        await update.message.reply_text(reply, parse_mode='HTML')
        
        # X√≥a file t·∫°m
        os.remove(csv_path)
        os.remove(chart_path)
        
    except Exception as e:
        await update.message.reply_text(f"C√≥ l·ªói x·∫£y ra: {e}")

async def fund_compare(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """So s√°nh c√°c qu·ªπ ƒë·∫ßu t∆∞"""
    if not context.args or len(context.args) < 2:
        await update.message.reply_text("Vui l√≤ng nh·∫≠p: /fund_compare <qu·ªπ1> <qu·ªπ2> [qu·ªπ3...]")
        await update.message.reply_text("V√≠ d·ª•: /fund_compare FUEVFVND E1VFVN30")
        return
    
    try:
        fund_symbols = [fund.upper() for fund in context.args]
        from vnstock import Trading
        trading = Trading(source='VCI')
        
        # L·∫•y d·ªØ li·ªáu c√°c qu·ªπ
        fund_data = trading.price_board(fund_symbols)
        
        if fund_data.empty:
            await update.message.reply_text("Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu cho c√°c qu·ªπ n√†y")
            return
        
        reply = f"üìä <b>SO S√ÅNH QU·ª∏ ƒê·∫¶U T∆Ø:</b>\n\n"
        
        # So s√°nh t·ª´ng qu·ªπ
        for _, row in fund_data.iterrows():
            symbol = row[('listing', 'symbol')]
            current_price = row[('match', 'match_price')]
            ref_price = row[('listing', 'ref_price')]
            change = current_price - ref_price
            pct_change = (change / ref_price) * 100 if ref_price else 0
            volume = row[('match', 'match_vol')]
            
            emoji = "üü¢" if change >= 0 else "üî¥"
            
            reply += f"{emoji} <b>{symbol}</b>\n"
            reply += f"   üìä Gi√°: {format_vnd(current_price)}‚Ç´ ({pct_change:+.2f}%)\n"
            reply += f"   üìà Thay ƒë·ªïi: {format_vnd(change)}‚Ç´\n"
            reply += f"   üìä KL: {format_vnd(volume)} ƒë∆°n v·ªã\n\n"
        
        # Ph√¢n t√≠ch xu h∆∞·ªõng
        changes = []
        for _, row in fund_data.iterrows():
            current_price = row[('match', 'match_price')]
            ref_price = row[('listing', 'ref_price')]
            pct_change = ((current_price - ref_price) / ref_price) * 100 if ref_price else 0
            changes.append(pct_change)
        
        if len(changes) > 1:
            best_performer = max(changes)
            worst_performer = min(changes)
            
            reply += "üìà <b>Ph√¢n t√≠ch xu h∆∞·ªõng:</b>\n"
            reply += f"‚Ä¢ Qu·ªπ tƒÉng m·∫°nh nh·∫•t: {best_performer:+.2f}%\n"
            reply += f"‚Ä¢ Qu·ªπ tƒÉng √≠t nh·∫•t: {worst_performer:+.2f}%\n"
            
            if all(change >= 0 for change in changes):
                reply += "‚Ä¢ üü¢ T·∫•t c·∫£ qu·ªπ ƒë·ªÅu tƒÉng\n"
            elif all(change <= 0 for change in changes):
                reply += "‚Ä¢ üî¥ T·∫•t c·∫£ qu·ªπ ƒë·ªÅu gi·∫£m\n"
            else:
                reply += "‚Ä¢ üü° Xu h∆∞·ªõng h·ªón h·ª£p\n"
        
        await update.message.reply_text(reply, parse_mode='HTML')
    except Exception as e:
        await update.message.reply_text(f"C√≥ l·ªói x·∫£y ra: {e}")

async def fund_sector(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Qu·ªπ ƒë·∫ßu t∆∞ theo ng√†nh"""
    try:
        from vnstock import Listing
        listing = Listing()
        
        reply = "üè≠ <b>QU·ª∏ ƒê·∫¶U T∆Ø THEO NG√ÄNH:</b>\n\n"
        
        # L·∫•y danh s√°ch ETF
        try:
            etf_list = listing.etf()
            if not etf_list.empty:
                # Ph√¢n lo·∫°i theo ng√†nh (d·ª±a tr√™n t√™n)
                sector_funds = {
                    'T√†i ch√≠nh': [],
                    'C√¥ng ngh·ªá': [],
                    'Ti√™u d√πng': [],
                    'V·∫≠t li·ªáu': [],
                    'Kh√°c': []
                }
                
                for _, row in etf_list.iterrows():
                    symbol = row.get('symbol', '')
                    name = row.get('organ_name', '')
                    
                    if any(keyword in name.upper() for keyword in ['T√ÄI CH√çNH', 'NG√ÇN H√ÄNG', 'B·∫¢O HI·ªÇM']):
                        sector_funds['T√†i ch√≠nh'].append((symbol, name))
                    elif any(keyword in name.upper() for keyword in ['C√îNG NGH·ªÜ', 'TECH', 'SOFTWARE']):
                        sector_funds['C√¥ng ngh·ªá'].append((symbol, name))
                    elif any(keyword in name.upper() for keyword in ['TI√äU D√ôNG', 'TH·ª∞C PH·∫®M', 'B√ÅN L·∫∫']):
                        sector_funds['Ti√™u d√πng'].append((symbol, name))
                    elif any(keyword in name.upper() for keyword in ['V·∫¨T LI·ªÜU', 'X√ÇY D·ª∞NG', 'TH√âP']):
                        sector_funds['V·∫≠t li·ªáu'].append((symbol, name))
                    else:
                        sector_funds['Kh√°c'].append((symbol, name))
                
                # Hi·ªÉn th·ªã theo ng√†nh
                for sector, funds in sector_funds.items():
                    if funds:
                        reply += f"üè≠ <b>{sector}:</b>\n"
                        for symbol, name in funds[:5]:  # Gi·ªõi h·∫°n 5 qu·ªπ m·ªói ng√†nh
                            reply += f"‚Ä¢ <b>{symbol}</b> - {name}\n"
                        if len(funds) > 5:
                            reply += f"  ... v√† {len(funds) - 5} qu·ªπ kh√°c\n"
                        reply += "\n"
            else:
                reply += "üìä Kh√¥ng c√≥ d·ªØ li·ªáu ETF\n\n"
        except:
            reply += "üìä Kh√¥ng c√≥ d·ªØ li·ªáu ETF\n\n"
        
        reply += "üí° <b>L∆∞u √Ω:</b>\n"
        reply += "‚Ä¢ Ph√¢n lo·∫°i d·ª±a tr√™n t√™n qu·ªπ\n"
        reply += "‚Ä¢ C√≥ th·ªÉ c√≥ qu·ªπ ƒëa ng√†nh\n"
        reply += "‚Ä¢ N√™n xem x√©t chi·∫øn l∆∞·ª£c ƒë·∫ßu t∆∞ th·ª±c t·∫ø\n"
        
        await update.message.reply_text(reply, parse_mode='HTML')
    except Exception as e:
        await update.message.reply_text(f"C√≥ l·ªói x·∫£y ra: {e}")

async def fund_ranking(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """X·∫øp h·∫°ng qu·ªπ ƒë·∫ßu t∆∞"""
    try:
        from vnstock import Listing, Trading
        listing = Listing()
        trading = Trading(source='VCI')
        
        reply = "üèÜ <b>X·∫æP H·∫†NG QU·ª∏ ƒê·∫¶U T∆Ø:</b>\n\n"
        
        # L·∫•y danh s√°ch ETF v√† gi√°
        try:
            etf_list = listing.etf()
            if not etf_list.empty:
                # L·∫•y gi√° cho c√°c ETF
                symbols = etf_list['symbol'].tolist()[:20]  # Gi·ªõi h·∫°n 20 ETF
                fund_prices = trading.price_board(symbols)
                
                if not fund_prices.empty:
                    # T√≠nh % thay ƒë·ªïi
                    fund_performance = []
                    for _, row in fund_prices.iterrows():
                        symbol = row[('listing', 'symbol')]
                        current_price = row[('match', 'match_price')]
                        ref_price = row[('listing', 'ref_price')]
                        pct_change = ((current_price - ref_price) / ref_price) * 100 if ref_price else 0
                        
                        # L·∫•y t√™n qu·ªπ
                        fund_info = etf_list[etf_list['symbol'] == symbol]
                        name = fund_info.iloc[0]['organ_name'] if not fund_info.empty else symbol
                        
                        fund_performance.append({
                            'symbol': symbol,
                            'name': name,
                            'pct_change': pct_change,
                            'price': current_price
                        })
                    
                    # S·∫Øp x·∫øp theo % thay ƒë·ªïi (gi·∫£m d·∫ßn)
                    fund_performance.sort(key=lambda x: x['pct_change'], reverse=True)
                    
                    reply += "üìà <b>Top 10 qu·ªπ tƒÉng gi√°:</b>\n"
                    for i, fund in enumerate(fund_performance[:10], 1):
                        emoji = "üü¢" if fund['pct_change'] >= 0 else "üî¥"
                        reply += f"{i}. {emoji} <b>{fund['symbol']}</b> ({fund['pct_change']:+.2f}%)\n"
                        reply += f"   {fund['name']}\n\n"
                    
                    reply += "üìâ <b>Top 5 qu·ªπ gi·∫£m gi√°:</b>\n"
                    for i, fund in enumerate(fund_performance[-5:], 1):
                        emoji = "üî¥"
                        reply += f"{i}. {emoji} <b>{fund['symbol']}</b> ({fund['pct_change']:+.2f}%)\n"
                        reply += f"   {fund['name']}\n\n"
                else:
                    reply += "üìä Kh√¥ng c√≥ d·ªØ li·ªáu gi√° qu·ªπ\n\n"
            else:
                reply += "üìä Kh√¥ng c√≥ d·ªØ li·ªáu ETF\n\n"
        except:
            reply += "üìä Kh√¥ng c√≥ d·ªØ li·ªáu qu·ªπ\n\n"
        
        reply += "üí° <b>L∆∞u √Ω:</b>\n"
        reply += "‚Ä¢ X·∫øp h·∫°ng d·ª±a tr√™n % thay ƒë·ªïi gi√°\n"
        reply += "‚Ä¢ Ch·ªâ t√≠nh c√°c ETF c√≥ d·ªØ li·ªáu\n"
        reply += "‚Ä¢ Hi·ªáu su·∫•t qu√° kh·ª© kh√¥ng ƒë·∫£m b·∫£o t∆∞∆°ng lai\n"
        
        await update.message.reply_text(reply, parse_mode='HTML')
    except Exception as e:
        await update.message.reply_text(f"C√≥ l·ªói x·∫£y ra: {e}") 