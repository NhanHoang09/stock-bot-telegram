#!/bin/bash

# Stock Bot Docker Management Script
# H·ªó tr·ª£ c·∫£ bot c≈© v√† bot modular

set -e

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Functions
print_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

check_bot_files() {
    if [ -f "bot_new.py" ]; then
        print_success "T√¨m th·∫•y bot modular (bot_new.py)"
        return 0
    elif [ -f "bot.py" ]; then
        print_warning "Ch·ªâ t√¨m th·∫•y bot c≈© (bot.py)"
        return 1
    else
        print_error "Kh√¥ng t√¨m th·∫•y file bot n√†o!"
        return 2
    fi
}

setup_modular_bot() {
    print_info "Thi·∫øt l·∫≠p bot modular..."
    
    if [ ! -f "bot_new.py" ]; then
        if [ -f "bot.py" ]; then
            print_info "T√°ch commands t·ª´ bot c≈©..."
            python split_commands.py
            print_success "ƒê√£ t·∫°o bot modular"
        else
            print_error "Kh√¥ng t√¨m th·∫•y bot.py ƒë·ªÉ t√°ch commands"
            exit 1
        fi
    fi
}

build_and_run() {
    print_info "Build v√† ch·∫°y Docker containers..."
    
    # Build images
    docker-compose build --no-cache
    
    # Run containers
    docker-compose up -d
    
    print_success "Docker containers ƒë√£ ƒë∆∞·ª£c kh·ªüi ƒë·ªông!"
    print_info "Bot ƒëang ch·∫°y tr√™n port 3336"
    print_info "Database ƒëang ch·∫°y tr√™n port 5432"
}

show_logs() {
    print_info "Hi·ªÉn th·ªã logs..."
    docker-compose logs -f stockbot-app
}

stop_containers() {
    print_info "D·ª´ng containers..."
    docker-compose down
    print_success "Containers ƒë√£ ƒë∆∞·ª£c d·ª´ng"
}

restart_containers() {
    print_info "Kh·ªüi ƒë·ªông l·∫°i containers..."
    docker-compose restart
    print_success "Containers ƒë√£ ƒë∆∞·ª£c kh·ªüi ƒë·ªông l·∫°i"
}

cleanup() {
    print_warning "X√≥a t·∫•t c·∫£ containers, images v√† volumes..."
    docker-compose down -v --rmi all
    print_success "Cleanup ho√†n th√†nh"
}

show_status() {
    print_info "Tr·∫°ng th√°i containers:"
    docker-compose ps
    
    echo ""
    print_info "S·ª≠ d·ª•ng t√†i nguy√™n:"
    docker stats --no-stream
}

migrate_to_modular() {
    print_info "Migration sang bot modular..."
    python migrate.py
    print_success "Migration ho√†n th√†nh!"
}

rollback_to_old() {
    print_info "Rollback v·ªÅ bot c≈©..."
    python migrate.py rollback
    print_success "Rollback ho√†n th√†nh!"
}

show_help() {
    echo "ü§ñ Stock Bot Docker Management Script"
    echo ""
    echo "Usage: $0 [COMMAND]"
    echo ""
    echo "Commands:"
    echo "  start     - Build v√† ch·∫°y containers"
    echo "  stop      - D·ª´ng containers"
    echo "  restart   - Kh·ªüi ƒë·ªông l·∫°i containers"
    echo "  logs      - Hi·ªÉn th·ªã logs"
    echo "  status    - Hi·ªÉn th·ªã tr·∫°ng th√°i"
    echo "  cleanup   - X√≥a t·∫•t c·∫£ containers v√† images"
    echo "  migrate   - Migration sang bot modular"
    echo "  rollback  - Rollback v·ªÅ bot c≈©"
    echo "  setup     - Thi·∫øt l·∫≠p bot modular"
    echo "  help      - Hi·ªÉn th·ªã h∆∞·ªõng d·∫´n n√†y"
    echo ""
    echo "Examples:"
    echo "  $0 start      # Kh·ªüi ƒë·ªông bot"
    echo "  $0 logs       # Xem logs"
    echo "  $0 migrate    # Chuy·ªÉn sang bot modular"
}

# Main script
case "${1:-help}" in
    start)
        check_bot_files
        setup_modular_bot
        build_and_run
        ;;
    stop)
        stop_containers
        ;;
    restart)
        restart_containers
        ;;
    logs)
        show_logs
        ;;
    status)
        show_status
        ;;
    cleanup)
        cleanup
        ;;
    migrate)
        migrate_to_modular
        ;;
    rollback)
        rollback_to_old
        ;;
    setup)
        setup_modular_bot
        ;;
    help|*)
        show_help
        ;;
esac 