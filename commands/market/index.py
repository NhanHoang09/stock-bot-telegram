from telegram import Update
from telegram.ext import ContextTypes
import matplotlib.pyplot as plt
import os
from utils.formatters import format_vnd

async def index(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Ch·ªâ s·ªë th·ªã tr∆∞·ªùng trong n∆∞·ªõc"""
    try:
        from vnstock import Trading
        trading = Trading(source='VCI')
        
        # L·∫•y th√¥ng tin c√°c ch·ªâ s·ªë ch√≠nh
        indices = ['VNINDEX', 'HNXINDEX', 'UPCOMINDEX']
        index_data = trading.price_board(indices)
        
        reply = "üìà <b>CH·ªà S·ªê TH·ªä TR∆Ø·ªúNG VI·ªÜT NAM:</b>\n\n"
        
        if not index_data.empty:
            for _, row in index_data.iterrows():
                symbol = row[('listing', 'symbol')]
                current_price = row[('match', 'match_price')]
                ref_price = row[('match', 'reference_price')]
                change = current_price - ref_price
                pct_change = (change / ref_price) * 100 if ref_price else 0
                volume = row[('match', 'match_vol')]
                
                emoji = "üü¢" if change >= 0 else "üî¥"
                
                # T√™n ch·ªâ s·ªë
                if symbol == "VNINDEX":
                    name = "VN-Index"
                    description = "Ch·ªâ s·ªë ch·ª©ng kho√°n TP.HCM"
                elif symbol == "HNXINDEX":
                    name = "HNX-Index"
                    description = "Ch·ªâ s·ªë ch·ª©ng kho√°n H√† N·ªôi"
                elif symbol == "UPCOMINDEX":
                    name = "UPCOM-Index"
                    description = "Ch·ªâ s·ªë ch·ª©ng kho√°n UPCOM"
                else:
                    name = symbol
                    description = "Ch·ªâ s·ªë th·ªã tr∆∞·ªùng"
                
                reply += f"{emoji} <b>{name}</b>\n"
                reply += f"   üìä Gi√°: {format_vnd(current_price)} ({pct_change:+.2f}%)\n"
                reply += f"   üìà Thay ƒë·ªïi: {format_vnd(change)}\n"
                reply += f"   üìä KL: {format_vnd(volume)} c·ªï\n"
                reply += f"   üìã {description}\n\n"
        else:
            reply += "üìä Kh√¥ng c√≥ d·ªØ li·ªáu ch·ªâ s·ªë\n"
        
        # Th√™m th√¥ng tin v·ªÅ c√°c ch·ªâ s·ªë ng√†nh
        reply += "üè≠ <b>Ch·ªâ s·ªë ng√†nh ch√≠nh:</b>\n"
        reply += "‚Ä¢ VN30 - Top 30 c·ªï phi·∫øu l·ªõn nh·∫•t HOSE\n"
        reply += "‚Ä¢ VNMID - Ch·ªâ s·ªë c·ªï phi·∫øu v·ª´a\n"
        reply += "‚Ä¢ VNSML - Ch·ªâ s·ªë c·ªï phi·∫øu nh·ªè\n"
        reply += "‚Ä¢ VNALL - Ch·ªâ s·ªë to√†n th·ªã tr∆∞·ªùng\n"
        reply += "‚Ä¢ VNMATERIAL - Ch·ªâ s·ªë ng√†nh v·∫≠t li·ªáu\n"
        reply += "‚Ä¢ VNFINANCIAL - Ch·ªâ s·ªë ng√†nh t√†i ch√≠nh\n"
        reply += "‚Ä¢ VNUTILITY - Ch·ªâ s·ªë ng√†nh ti·ªán √≠ch\n"
        reply += "‚Ä¢ VNHEALTHCARE - Ch·ªâ s·ªë ng√†nh y t·∫ø\n"
        reply += "‚Ä¢ VNINDUSTRIAL - Ch·ªâ s·ªë ng√†nh c√¥ng nghi·ªáp\n"
        reply += "‚Ä¢ VNCONSUMER - Ch·ªâ s·ªë ng√†nh ti√™u d√πng\n"
        
        await update.message.reply_text(reply, parse_mode='HTML')
    except Exception as e:
        await update.message.reply_text(f"C√≥ l·ªói x·∫£y ra: {e}")

async def index_detail(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Chi ti·∫øt ch·ªâ s·ªë th·ªã tr∆∞·ªùng"""
    if not context.args:
        await update.message.reply_text("Vui l√≤ng nh·∫≠p: /index_detail <t√™n_ch·ªâ_s·ªë>")
        await update.message.reply_text("V√≠ d·ª•: /index_detail VNINDEX")
        await update.message.reply_text("V√≠ d·ª•: /index_detail VN30")
        return
    
    try:
        index_name = context.args[0].upper()
        from vnstock import Trading
        trading = Trading(source='VCI')
        
        # L·∫•y d·ªØ li·ªáu ch·ªâ s·ªë
        index_data = trading.price_board([index_name])
        
        if index_data.empty:
            await update.message.reply_text(f"Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu cho ch·ªâ s·ªë {index_name}")
            return
        
        row = index_data.iloc[0]
        current_price = row[('match', 'match_price')]
        ref_price = row[('match', 'reference_price')]
        change = current_price - ref_price
        pct_change = (change / ref_price) * 100 if ref_price else 0
        volume = row[('match', 'match_vol')]
        high = row[('match', 'highest')]
        low = row[('match', 'lowest')]
        
        emoji = "üü¢" if change >= 0 else "üî¥"
        
        # T√™n v√† m√¥ t·∫£ ch·ªâ s·ªë
        index_info = {
            'VNINDEX': ('VN-Index', 'Ch·ªâ s·ªë ch·ª©ng kho√°n TP.HCM', 'Ch·ªâ s·ªë ƒë·∫°i di·ªán cho to√†n b·ªô th·ªã tr∆∞·ªùng ch·ª©ng kho√°n TP.HCM'),
            'HNXINDEX': ('HNX-Index', 'Ch·ªâ s·ªë ch·ª©ng kho√°n H√† N·ªôi', 'Ch·ªâ s·ªë ƒë·∫°i di·ªán cho th·ªã tr∆∞·ªùng ch·ª©ng kho√°n H√† N·ªôi'),
            'UPCOMINDEX': ('UPCOM-Index', 'Ch·ªâ s·ªë ch·ª©ng kho√°n UPCOM', 'Ch·ªâ s·ªë ƒë·∫°i di·ªán cho th·ªã tr∆∞·ªùng UPCOM'),
            'VN30': ('VN30', 'Ch·ªâ s·ªë VN30', 'Ch·ªâ s·ªë c·ªßa 30 c·ªï phi·∫øu c√≥ gi√° tr·ªã v·ªën h√≥a l·ªõn nh·∫•t HOSE'),
            'VNMID': ('VNMID', 'Ch·ªâ s·ªë VNMID', 'Ch·ªâ s·ªë c·ªï phi·∫øu v·ª´a'),
            'VNSML': ('VNSML', 'Ch·ªâ s·ªë VNSML', 'Ch·ªâ s·ªë c·ªï phi·∫øu nh·ªè'),
            'VNFINANCIAL': ('VNFINANCIAL', 'Ch·ªâ s·ªë t√†i ch√≠nh', 'Ch·ªâ s·ªë ng√†nh t√†i ch√≠nh - ng√¢n h√†ng'),
            'VNMATERIAL': ('VNMATERIAL', 'Ch·ªâ s·ªë v·∫≠t li·ªáu', 'Ch·ªâ s·ªë ng√†nh v·∫≠t li·ªáu - x√¢y d·ª±ng'),
            'VNUTILITY': ('VNUTILITY', 'Ch·ªâ s·ªë ti·ªán √≠ch', 'Ch·ªâ s·ªë ng√†nh ti·ªán √≠ch c√¥ng c·ªông'),
            'VNHEALTHCARE': ('VNHEALTHCARE', 'Ch·ªâ s·ªë y t·∫ø', 'Ch·ªâ s·ªë ng√†nh y t·∫ø - d∆∞·ª£c ph·∫©m'),
            'VNINDUSTRIAL': ('VNINDUSTRIAL', 'Ch·ªâ s·ªë c√¥ng nghi·ªáp', 'Ch·ªâ s·ªë ng√†nh c√¥ng nghi·ªáp'),
            'VNCONSUMER': ('VNCONSUMER', 'Ch·ªâ s·ªë ti√™u d√πng', 'Ch·ªâ s·ªë ng√†nh ti√™u d√πng')
        }
        
        name, short_desc, full_desc = index_info.get(index_name, (index_name, 'Ch·ªâ s·ªë th·ªã tr∆∞·ªùng', 'Ch·ªâ s·ªë ƒë·∫°i di·ªán cho th·ªã tr∆∞·ªùng'))
        
        reply = f"üìä <b>CHI TI·∫æT CH·ªà S·ªê {name}:</b>\n\n"
        reply += f"üìã <b>Th√¥ng tin c∆° b·∫£n:</b>\n"
        reply += f"‚Ä¢ T√™n: {name}\n"
        reply += f"‚Ä¢ M√¥ t·∫£: {short_desc}\n"
        reply += f"‚Ä¢ Chi ti·∫øt: {full_desc}\n\n"
        
        reply += f"{emoji} <b>D·ªØ li·ªáu hi·ªán t·∫°i:</b>\n"
        reply += f"‚Ä¢ Gi√°: {format_vnd(current_price)} ({pct_change:+.2f}%)\n"
        reply += f"‚Ä¢ Thay ƒë·ªïi: {format_vnd(change)}\n"
        reply += f"‚Ä¢ Kh·ªëi l∆∞·ª£ng: {format_vnd(volume)} c·ªï\n"
        reply += f"‚Ä¢ Cao nh·∫•t: {format_vnd(high)}\n"
        reply += f"‚Ä¢ Th·∫•p nh·∫•t: {format_vnd(low)}\n\n"
        
        # Th√™m th√¥ng tin v·ªÅ th√†nh ph·∫ßn (n·∫øu c√≥)
        if index_name in ['VN30', 'VNMID', 'VNSML']:
            reply += "üìã <b>Th√†nh ph·∫ßn ch√≠nh:</b>\n"
            if index_name == 'VN30':
                reply += "‚Ä¢ VNM, VIC, VHM, HPG, TCB, BID, MBB, GAS, VPB, FPT\n"
                reply += "‚Ä¢ VRE, VNM, VIC, VHM, HPG, TCB, BID, MBB, GAS, VPB\n"
                reply += "‚Ä¢ FPT, VRE, VNM, VIC, VHM, HPG, TCB, BID, MBB, GAS\n"
            elif index_name == 'VNMID':
                reply += "‚Ä¢ C√°c c·ªï phi·∫øu c√≥ v·ªën h√≥a v·ª´a\n"
            elif index_name == 'VNSML':
                reply += "‚Ä¢ C√°c c·ªï phi·∫øu c√≥ v·ªën h√≥a nh·ªè\n"
        
        await update.message.reply_text(reply, parse_mode='HTML')
    except Exception as e:
        await update.message.reply_text(f"C√≥ l·ªói x·∫£y ra: {e}")

async def index_history(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """L·ªãch s·ª≠ ch·ªâ s·ªë th·ªã tr∆∞·ªùng"""
    if not context.args:
        await update.message.reply_text("Vui l√≤ng nh·∫≠p: /index_history <t√™n_ch·ªâ_s·ªë> <s·ªë_ng√†y>")
        await update.message.reply_text("V√≠ d·ª•: /index_history VNINDEX 30")
        return
    
    try:
        index_name = context.args[0].upper()
        days = int(context.args[1]) if len(context.args) > 1 else 30
        
        from vnstock import Vnstock
        stock = Vnstock().stock(symbol=index_name, source='VCI')
        
        # T√≠nh ng√†y b·∫Øt ƒë·∫ßu
        from datetime import datetime, timedelta
        end_date = datetime.now()
        start_date = end_date - timedelta(days=days)
        start_str = start_date.strftime('%Y-%m-%d')
        end_str = end_date.strftime('%Y-%m-%d')
        
        # L·∫•y l·ªãch s·ª≠
        df = stock.quote.history(start=start_str, end=end_str, interval='1D')
        
        if df.empty:
            await update.message.reply_text(f"Kh√¥ng c√≥ d·ªØ li·ªáu l·ªãch s·ª≠ cho ch·ªâ s·ªë {index_name}")
            return
        
        # T·∫°o bi·ªÉu ƒë·ªì
        plt.figure(figsize=(12, 6))
        plt.plot(df['time'], df['close'], label=f'Ch·ªâ s·ªë {index_name}', color='blue', marker='o', markersize=3, linewidth=2)
        plt.title(f'L·ªãch s·ª≠ ch·ªâ s·ªë {index_name} ({start_str} - {end_str})')
        plt.xlabel('Ng√†y')
        plt.ylabel('Gi√° tr·ªã ch·ªâ s·ªë')
        plt.xticks(rotation=45)
        plt.legend()
        plt.grid(True, linestyle='--', alpha=0.6)
        plt.tight_layout()
        
        chart_path = f'/tmp/{index_name}_index_chart.png'
        plt.savefig(chart_path)
        plt.close()
        
        # G·ª≠i bi·ªÉu ƒë·ªì
        await update.message.reply_photo(photo=open(chart_path, 'rb'))
        
        # G·ª≠i file CSV
        csv_path = f"/tmp/{index_name}_index_history.csv"
        df.to_csv(csv_path)
        await update.message.reply_document(document=open(csv_path, 'rb'))
        
        # Th·ªëng k√™ c∆° b·∫£n
        current_value = df['close'].iloc[-1]
        start_value = df['close'].iloc[0]
        total_change = current_value - start_value
        total_pct_change = (total_change / start_value) * 100
        max_value = df['close'].max()
        min_value = df['close'].min()
        
        reply = f"üìä <b>Th·ªëng k√™ ch·ªâ s·ªë {index_name} ({days} ng√†y):</b>\n\n"
        reply += f"‚Ä¢ Gi√° hi·ªán t·∫°i: {format_vnd(current_value)}\n"
        reply += f"‚Ä¢ Gi√° ƒë·∫ßu k·ª≥: {format_vnd(start_value)}\n"
        reply += f"‚Ä¢ Thay ƒë·ªïi: {format_vnd(total_change)} ({total_pct_change:+.2f}%)\n"
        reply += f"‚Ä¢ Cao nh·∫•t: {format_vnd(max_value)}\n"
        reply += f"‚Ä¢ Th·∫•p nh·∫•t: {format_vnd(min_value)}\n"
        
        await update.message.reply_text(reply, parse_mode='HTML')
        
        # X√≥a file t·∫°m
        os.remove(csv_path)
        os.remove(chart_path)
        
    except Exception as e:
        await update.message.reply_text(f"C√≥ l·ªói x·∫£y ra: {e}")

async def index_compare(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """So s√°nh c√°c ch·ªâ s·ªë th·ªã tr∆∞·ªùng"""
    if not context.args or len(context.args) < 2:
        await update.message.reply_text("Vui l√≤ng nh·∫≠p: /index_compare <ch·ªâ_s·ªë1> <ch·ªâ_s·ªë2> [ch·ªâ_s·ªë3...]")
        await update.message.reply_text("V√≠ d·ª•: /index_compare VNINDEX HNXINDEX")
        await update.message.reply_text("V√≠ d·ª•: /index_compare VN30 VNMID VNSML")
        return
    
    try:
        indices = [idx.upper() for idx in context.args]
        from vnstock import Trading
        trading = Trading(source='VCI')
        
        # L·∫•y d·ªØ li·ªáu c√°c ch·ªâ s·ªë
        index_data = trading.price_board(indices)
        
        if index_data.empty:
            await update.message.reply_text("Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu cho c√°c ch·ªâ s·ªë n√†y")
            return
        
        reply = f"üìä <b>SO S√ÅNH CH·ªà S·ªê TH·ªä TR∆Ø·ªúNG:</b>\n\n"
        
        # T√™n ch·ªâ s·ªë
        index_names = {
            'VNINDEX': 'VN-Index',
            'HNXINDEX': 'HNX-Index', 
            'UPCOMINDEX': 'UPCOM-Index',
            'VN30': 'VN30',
            'VNMID': 'VNMID',
            'VNSML': 'VNSML',
            'VNFINANCIAL': 'VNFINANCIAL',
            'VNMATERIAL': 'VNMATERIAL',
            'VNUTILITY': 'VNUTILITY',
            'VNHEALTHCARE': 'VNHEALTHCARE',
            'VNINDUSTRIAL': 'VNINDUSTRIAL',
            'VNCONSUMER': 'VNCONSUMER'
        }
        
        # So s√°nh t·ª´ng ch·ªâ s·ªë
        for _, row in index_data.iterrows():
            symbol = row[('listing', 'symbol')]
            current_price = row[('match', 'match_price')]
            ref_price = row[('listing', 'ref_price')]
            change = current_price - ref_price
            pct_change = (change / ref_price) * 100 if ref_price else 0
            volume = row[('match', 'match_vol')]
            
            emoji = "üü¢" if change >= 0 else "üî¥"
            name = index_names.get(symbol, symbol)
            
            reply += f"{emoji} <b>{name}</b>\n"
            reply += f"   üìä Gi√°: {format_vnd(current_price)} ({pct_change:+.2f}%)\n"
            reply += f"   üìà Thay ƒë·ªïi: {format_vnd(change)}\n"
            reply += f"   üìä KL: {format_vnd(volume)} c·ªï\n\n"
        
        # Ph√¢n t√≠ch xu h∆∞·ªõng
        changes = []
        for _, row in index_data.iterrows():
            current_price = row[('match', 'match_price')]
            ref_price = row[('listing', 'ref_price')]
            pct_change = ((current_price - ref_price) / ref_price) * 100 if ref_price else 0
            changes.append(pct_change)
        
        if len(changes) > 1:
            best_performer = max(changes)
            worst_performer = min(changes)
            
            reply += "üìà <b>Ph√¢n t√≠ch xu h∆∞·ªõng:</b>\n"
            reply += f"‚Ä¢ Ch·ªâ s·ªë tƒÉng m·∫°nh nh·∫•t: {best_performer:+.2f}%\n"
            reply += f"‚Ä¢ Ch·ªâ s·ªë tƒÉng √≠t nh·∫•t: {worst_performer:+.2f}%\n"
            
            if all(change >= 0 for change in changes):
                reply += "‚Ä¢ üü¢ T·∫•t c·∫£ ch·ªâ s·ªë ƒë·ªÅu tƒÉng\n"
            elif all(change <= 0 for change in changes):
                reply += "‚Ä¢ üî¥ T·∫•t c·∫£ ch·ªâ s·ªë ƒë·ªÅu gi·∫£m\n"
            else:
                reply += "‚Ä¢ üü° Xu h∆∞·ªõng h·ªón h·ª£p\n"
        
        await update.message.reply_text(reply, parse_mode='HTML')
    except Exception as e:
        await update.message.reply_text(f"C√≥ l·ªói x·∫£y ra: {e}")

async def index_sector(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Ch·ªâ s·ªë ng√†nh v√† ph√¢n t√≠ch sector"""
    try:
        from vnstock import Trading
        trading = Trading(source='VCI')
        
        # C√°c ch·ªâ s·ªë ng√†nh ch√≠nh
        sector_indices = [
            'VNFINANCIAL', 'VNMATERIAL', 'VNUTILITY', 
            'VNHEALTHCARE', 'VNINDUSTRIAL', 'VNCONSUMER'
        ]
        
        sector_data = trading.price_board(sector_indices)
        
        reply = "üè≠ <b>CH·ªà S·ªê NG√ÄNH TH·ªä TR∆Ø·ªúNG:</b>\n\n"
        
        if not sector_data.empty:
            # S·∫Øp x·∫øp theo % thay ƒë·ªïi
            sector_performance = []
            for _, row in sector_data.iterrows():
                symbol = row[('listing', 'symbol')]
                current_price = row[('match', 'match_price')]
                ref_price = row[('listing', 'ref_price')]
                pct_change = ((current_price - ref_price) / ref_price) * 100 if ref_price else 0
                
                sector_names = {
                    'VNFINANCIAL': 'üè¶ T√†i ch√≠nh - Ng√¢n h√†ng',
                    'VNMATERIAL': 'üèóÔ∏è V·∫≠t li·ªáu - X√¢y d·ª±ng',
                    'VNUTILITY': '‚ö° Ti·ªán √≠ch c√¥ng c·ªông',
                    'VNHEALTHCARE': 'üè• Y t·∫ø - D∆∞·ª£c ph·∫©m',
                    'VNINDUSTRIAL': 'üè≠ C√¥ng nghi·ªáp',
                    'VNCONSUMER': 'üõí Ti√™u d√πng'
                }
                
                sector_performance.append({
                    'symbol': symbol,
                    'name': sector_names.get(symbol, symbol),
                    'price': current_price,
                    'pct_change': pct_change
                })
            
            # S·∫Øp x·∫øp theo % thay ƒë·ªïi (gi·∫£m d·∫ßn)
            sector_performance.sort(key=lambda x: x['pct_change'], reverse=True)
            
            for i, sector in enumerate(sector_performance, 1):
                emoji = "üü¢" if sector['pct_change'] >= 0 else "üî¥"
                reply += f"{i}. {emoji} <b>{sector['name']}</b>\n"
                reply += f"   üìä Gi√°: {format_vnd(sector['price'])} ({sector['pct_change']:+.2f}%)\n\n"
        else:
            reply += "üìä Kh√¥ng c√≥ d·ªØ li·ªáu ch·ªâ s·ªë ng√†nh\n"
        
        # Th√¥ng tin th√™m v·ªÅ c√°c ng√†nh
        reply += "üìà <b>Th√¥ng tin ng√†nh:</b>\n"
        reply += "‚Ä¢ <b>T√†i ch√≠nh:</b> Ng√¢n h√†ng, b·∫£o hi·ªÉm, ch·ª©ng kho√°n\n"
        reply += "‚Ä¢ <b>V·∫≠t li·ªáu:</b> Th√©p, xi mƒÉng, x√¢y d·ª±ng\n"
        reply += "‚Ä¢ <b>Ti·ªán √≠ch:</b> ƒêi·ªán, n∆∞·ªõc, gas\n"
        reply += "‚Ä¢ <b>Y t·∫ø:</b> D∆∞·ª£c ph·∫©m, thi·∫øt b·ªã y t·∫ø\n"
        reply += "‚Ä¢ <b>C√¥ng nghi·ªáp:</b> S·∫£n xu·∫•t, ch·∫ø t·∫°o\n"
        reply += "‚Ä¢ <b>Ti√™u d√πng:</b> Th·ª±c ph·∫©m, ƒë·ªì u·ªëng, b√°n l·∫ª\n\n"
        
        reply += "üí° <b>L∆∞u √Ω:</b>\n"
        reply += "‚Ä¢ Ch·ªâ s·ªë ng√†nh ph·∫£n √°nh xu h∆∞·ªõng c·ªßa t·ª´ng lƒ©nh v·ª±c\n"
        reply += "‚Ä¢ C√≥ th·ªÉ d√πng ƒë·ªÉ ph√¢n t√≠ch rotation gi·ªØa c√°c ng√†nh\n"
        reply += "‚Ä¢ Theo d√µi ƒë·ªÉ n·∫Øm b·∫Øt c∆° h·ªôi ƒë·∫ßu t∆∞ theo sector\n"
        
        await update.message.reply_text(reply, parse_mode='HTML')
    except Exception as e:
        await update.message.reply_text(f"C√≥ l·ªói x·∫£y ra: {e}") 